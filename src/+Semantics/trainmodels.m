function net = trainmodels(outputName)
    %
    %
    
    if nargin < 1
        outputName = 'semanticNet';
    end

    %% Parameters
    modelDirectory = fullfile(srcRoot(), 'models');
    inputSize = [512, 512, 3];
    numClasses = 2;
    % networkType = 'resnet18';
    trainFraction = 0.7;

    %% Data
    [imagesTrain, labelsTrain, imagesTest, labelsTest] = ...
        Semantics.accessSudokuData(trainFraction, false);

    augmenter = imageDataAugmenter( ...
        'RandXReflection',false, ...
        'RandYReflection',false, ...
        'RandRotation', [15, 15], ...
        'RandXScale', [0.75, 1.33], ...
        'RandYScale', [0.75, 1.33], ...
        'RandXTranslation', [-100, 100], ...
        'RandYTranslation', [-100, 100]);

    train = pixelLabelImageDatastore(imagesTrain, labelsTrain, ...
        'OutputSize', inputSize(1:2), ...
        'DataAugmentation', augmenter);
    test = pixelLabelImageDatastore(imagesTest, labelsTest, ...
        'OutputSize', inputSize(1:2));

    %% Network
    layers = deeplabv3plusLayers(inputSize, numClasses, 'resnet18');
%     layers = segnetLayers(inputSize, numClasses, 'vgg16');
    layers = weightLossByFrequency(layers, train);

    %% Options

    opts = trainingOptions('sgdm', ...
        'InitialLearnRate', 5e-5, ...
        'LearnRateDropFactor', 0.1, ...
        'LearnRateDropPeriod', 20, ...
        'LearnRateSchedule', 'piecewise', ...
        'ValidationData', test, ...
        'ValidationPatience', Inf, ...
        'MaxEpochs', 20, ...
        'MiniBatchSize', 2, ...
        'Shuffle', 'every-epoch', ...
        'Plots', 'training-progress', ...
        'ExecutionEnvironment','auto',...
        'CheckpointPath', '');

    %% Train
    net = trainNetwork(train, layers, opts);

    %% Save
    if ~isfolder(modelDirectory)
        mkdir(modelDirectory)
    end
    outputFile = fullfile(modelDirectory, outputName);
    save(outputFile);
end

function lgraph = weightLossByFrequency(lgraph, pixelImageDataStore)

    pixelCounts = countEachLabel(pixelImageDataStore);
    imageFreq = pixelCounts.PixelCount./pixelCounts.ImagePixelCount;
    classWeights = mean(imageFreq)./imageFreq;
    pxLayer = pixelClassificationLayer('Name', 'labels', ...
                                        'ClassNames', pixelCounts.Name, ...
                                        'ClassWeights', classWeights);

    lgraph = replaceLayer(lgraph, 'classification', pxLayer);
%       lgraph = removeLayers(lgraph, 'pixelLabels');
%       lgraph = addLayers(lgraph, pxLayer);
%       lgraph = connectLayers(lgraph, 'softmax', 'labels');

end
